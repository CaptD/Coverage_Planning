#include "ros/ros.h"
#include "gazebo_ray_trace/RayTrace.h"
#include <math.h>
#include <gazebo/common/Plugin.hh>



namespace gazebo
{

  class RayTracer : public WorldPlugin
  {
  public:
    RayTracer() : WorldPlugin()
    {
    }

    // bool rayTrace(gazebo_ray_trace::RayTrace::Request &req,
    // 	      gazebo_ray_trace::RayTrace::Response &resp)
    // {
    //   resp.dist = sqrt(
    // 		       pow(req.start.x - req.end.x, 2) + 
    // 		       pow(req.start.y - req.end.y, 2) + 
    // 		       pow(req.start.z - req.end.z, 2));

    //   ROS_INFO("Sending Response: %ld", (long int)resp.dist);
    //   return true;
    // }

    void Load(physics::WorldPtr _world, sdf::ElementPtr _sdf){
      // ros::init(argc, argv, "ray_trace_server");
      // ros::NodeHandle n;

      // ros::ServiceServer service = n.advertiseService("ray_trace", rayTrace);
      // ROS_INFO("Ready to ray trace");
      // ros::spin();

      if(!ros::isInitialized()){
	ROS_FATAL_STREAM("A ROS node for Gazebo has not been initialized, unable to load plugin");
      }
      ROS_INFO("Ready to ray trace");
	  
    }
  };
  GZ_REGISTER_WORLD_PLUGIN(RayTracer);
}




	      
// bool rayTrace(gazebo_ray_trace::RayTrace::Request &req,
// 	      gazebo_ray_trace::RayTrace::Response &resp){
//   resp.dist = sqrt(
// 		   pow(req.start.x - req.end.x, 2) + 
// 		   pow(req.start.y - req.end.y, 2) + 
// 		   pow(req.start.z - req.end.z, 2));

//   ROS_INFO("Sending Response: %ld", (long int)resp.dist);
//   return true;
// }

// int main(int argc, char **argv){
//   ros::init(argc, argv, "ray_trace_server");
//   ros::NodeHandle n;

//   ros::ServiceServer service = n.advertiseService("ray_trace", rayTrace);
//   ROS_INFO("Ready to ray trace");
//   ros::spin();

//   return 0;
// }
	      

